MODULE User(auth)
VAR
    status: { NonCritical, Trying, Critical };
ASSIGN
    init(status) := NonCritical;
    next(status) :=
        case
            status = NonCritical : { NonCritical, Trying };
            status = Trying :
                case
                    next(auth) = FALSE : Trying;
                    next(auth) = TRUE : Critical;
                esac;
            status = Critical :
                case
                    TRUE : {Critical, NonCritical};
                esac;
        esac;
JUSTICE status = Critical;
VAR
    req: boolean;
    crit: boolean;
ASSIGN
    req := status = Trying;
    crit := status = Critical;
    
--------------------------------------------------
---- The Arbiter ---------------------------------
--------------------------------------------------
MODULE Arbiter(req0, crit0, req1, crit1, req2, crit2)
VAR
    auth0: boolean;
    order: 0..2;
ASSIGN
    init(auth0) := FALSE;
    init(order) := 0;
    next(auth0) := req0 & !crit1 & !crit2 & (order = 0);
VAR
    auth1: boolean;
ASSIGN
    init(auth1) := FALSE;
    next(auth1) := req1 & !crit0 & !crit2 & (order = 1);
VAR
    auth2: boolean;
ASSIGN
    init(auth2) := FALSE;
    next(auth2) := req2 & !crit0 & !crit1 & (order = 2);
        next(order) :=
            case
                order = 2 : 0;
                TRUE : order + 1;
            esac;

--------------------------------------------------
---- The main module -----------------------------
--------------------------------------------------
MODULE main
VAR
U0: User(Ar.auth0); --- User 0
U1: User(Ar.auth1); --- User 1
U2: User(Ar.auth2); --- User 1
Ar: Arbiter(U0.req, U0.crit, U1.req, U1.crit, U2.req, U2.crit);

CTLSPEC AG (U0.status = Critical & U1.status = Critical -> FALSE);
CTLSPEC AG (U0.status = Critical & U2.status = Critical -> FALSE);
CTLSPEC AG (U1.status = Critical & U2.status = Critical -> FALSE);

CTLSPEC AG (U0.status = Trying -> AF (U0.status = Critical));
CTLSPEC AG (U1.status = Trying -> AF (U1.status = Critical));
CTLSPEC AG (U2.status = Trying -> AF (U2.status = Critical));

CTLSPEC AG (U0.status = Critical -> AF (U0.status = NonCritical));
CTLSPEC AG (U1.status = Critical -> AF (U1.status = NonCritical));
CTLSPEC AG (U2.status = Critical -> AF (U2.status = NonCritical));